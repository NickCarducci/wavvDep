import React from "react";
import PlansByName from "./components/Calendar/PlansByName";
import Calendar from "./components/Calendar";
import Make from "./components/Entities/Make";
import Made from "./components/Entities/Made";
import Eventedmopen from "./widgets/tool/eventedmopen";
import PlanOpen from "./components/Calendar/PouchDBpages/planopen";
import PlanEdit from "./components/Calendar/PouchDBpages/planedit";
import EmailConfirm from "./widgets/EmailConfirm";
import Nothing from "./components/Media/Nothing";
import Login from "./widgets/Login";
import { Route, Switch, Redirect } from "react-router-dom";
import FileManager from "./components/Media/FileManager";
import Document from "./components/Media/Document";

class Routes extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      inviteChosen: "",
      batterUp: true
    };
  }
  render() {
    const { noteList, noteTitles, location } = this.props;
    const PrivateRoute = ({ render: Component, ...rest }, props) => {
      return (
        <Route
          {...rest}
          render={(props) =>
            this.props.auth !== undefined ? (
              <Component {...props} />
            ) : (
              <Redirect
                to={{
                  pathname: "/login",
                  state: { bumpedFrom: props.location.pathname }
                }}
              />
            )
          }
        />
      );
    };
    /*const BumpRoute = ({ render: Component, ...rest }, props) => {
      return (
        <Route
          {...rest}
          render={(props) =>
            this.props.auth !== undefined ? (
              <Redirect
                to={{
                  pathname: props.location.pathname
                    ? props.location.pathname
                    : "/"
                }}
              />
            ) : (
              <Component {...props} />
            )
          }
        />
      );
    };*/
    return (
      <Switch key={location.key} location={location}>
        <PrivateRoute
          //exact
          path="/__/auth/action"
          render={(props) => (
            <EmailConfirm
              {...props}
              loaded={this.props.loaded}
              user={this.props.user}
              auth={this.props.auth}
            />
          )}
        />
        <PrivateRoute
          exact
          path="/newevent"
          render={(props) => (
            <Make
              {...props}
              hydrateUser={this.props.hydrateUser}
              city={this.props.city}
              community={this.props.community}
              communities={this.props.communities}
              rangeChosen={this.props.rangeChosen}
              openplanner={this.props.openplanner}
              materialDateOpen={this.props.materialDateOpen}
              materialDate={
                this.props.materialDate ? this.props.materialDate : new Date()
              }
              materialDateOpener={this.props.materialDateOpener}
              eventInitial={true}
              menuOpener={this.props.menuOpener}
              createSliderOpen={this.props.createSliderOpen}
              //ref={this.CreateEventThePage}
              myVariable={this.props.myVariable}
              user={this.props.user}
              auth={this.props.auth}
              setKey={this.props.setKey}
              myClubs={this.props.myClubs}
              myServices={this.props.myServices}
              myClasses={this.props.myClasses}
              myDepartments={this.props.myDepartments}
              myRestaurants={this.props.myRestaurants}
              myShops={this.props.myShops}
              myPages={this.props.myPages}
              myVenues={this.props.myVenues}
              clearMaterialDate={this.props.clearMaterialDate}
            />
          )}
        />
        <PrivateRoute
          exact
          path="/newclub"
          render={(props) => (
            <Make
              {...props}
              hydrateUser={this.props.hydrateUser}
              city={this.props.city}
              community={this.props.community}
              communities={this.props.communities}
              materialDate={
                this.props.materialDate ? this.props.materialDate : new Date()
              }
              openplanner={this.props.openplanner}
              materialDateOpen={this.props.materialDateOpen}
              materialDateOpener={this.props.materialDateOpener}
              clubInitial={true}
              menuOpener={this.props.menuOpener}
              createSliderOpen={this.props.createSliderOpen}
              //ref={this.CreateEventThePage}
              myVariable={this.props.myVariable}
              user={this.props.user}
              auth={this.props.auth}
              clearMaterialDate={this.props.clearMaterialDate}
            />
          )}
        />
        <PrivateRoute
          exact
          path="/newshop"
          render={(props) => (
            <Make
              {...props}
              hydrateUser={this.props.hydrateUser}
              city={this.props.city}
              community={this.props.community}
              communities={this.props.communities}
              materialDate={
                this.props.materialDate ? this.props.materialDate : new Date()
              }
              openplanner={this.props.openplanner}
              materialDateOpen={this.props.materialDateOpen}
              materialDateOpener={this.props.materialDateOpener}
              shopInitial={true}
              menuOpener={this.props.menuOpener}
              createSliderOpen={this.props.createSliderOpen}
              //ref={this.CreateEventThePage}
              myVariable={this.props.myVariable}
              user={this.props.user}
              auth={this.props.auth}
              clearMaterialDate={this.props.clearMaterialDate}
            />
          )}
        />
        <PrivateRoute
          exact
          path="/newrestaurant"
          render={(props) => (
            <Make
              {...props}
              hydrateUser={this.props.hydrateUser}
              city={this.props.city}
              community={this.props.community}
              communities={this.props.communities}
              materialDate={
                this.props.materialDate ? this.props.materialDate : new Date()
              }
              openplanner={this.props.openplanner}
              materialDateOpen={this.props.materialDateOpen}
              materialDateOpener={this.props.materialDateOpener}
              restaurantInitial={true}
              menuOpener={this.props.menuOpener}
              createSliderOpen={this.props.createSliderOpen}
              //ref={this.CreateEventThePage}
              myVariable={this.props.myVariable}
              user={this.props.user}
              auth={this.props.auth}
              clearMaterialDate={this.props.clearMaterialDate}
            />
          )}
        />
        <PrivateRoute
          exact
          path="/newservice"
          render={(props) => (
            <Make
              {...props}
              hydrateUser={this.props.hydrateUser}
              city={this.props.city}
              community={this.props.community}
              communities={this.props.communities}
              materialDate={
                this.props.materialDate ? this.props.materialDate : new Date()
              }
              openplanner={this.props.openplanner}
              materialDateOpen={this.props.materialDateOpen}
              materialDateOpener={this.props.materialDateOpener}
              serviceInitial={true}
              menuOpener={this.props.menuOpener}
              createSliderOpen={this.props.createSliderOpen}
              //ref={this.CreateEventThePage}
              myVariable={this.props.myVariable}
              user={this.props.user}
              auth={this.props.auth}
              clearMaterialDate={this.props.clearMaterialDate}
            />
          )}
        />
        <PrivateRoute
          exact
          path="/newjob"
          render={(props) => (
            <Make
              {...props}
              hydrateUser={this.props.hydrateUser}
              city={this.props.city}
              community={this.props.community}
              communities={this.props.communities}
              rangeChosen={this.props.rangeChosen}
              openplanner={this.props.openplanner}
              materialDateOpen={this.props.materialDateOpen}
              materialDate={
                this.props.materialDate ? this.props.materialDate : new Date()
              }
              materialDateOpener={this.props.materialDateOpener}
              jobInitial={true}
              menuOpener={this.props.menuOpener}
              createSliderOpen={this.props.createSliderOpen}
              //ref={this.CreateEventThePage}
              myVariable={this.props.myVariable}
              user={this.props.user}
              auth={this.props.auth}
              clearMaterialDate={this.props.clearMaterialDate}
            />
          )}
        />
        <PrivateRoute
          exact
          path="/newhousing"
          render={(props) => (
            <Make
              {...props}
              hydrateUser={this.props.hydrateUser}
              city={this.props.city}
              community={this.props.community}
              communities={this.props.communities}
              materialDate={
                this.props.materialDate ? this.props.materialDate : new Date()
              }
              openplanner={this.props.openplanner}
              materialDateOpen={this.props.materialDateOpen}
              materialDateOpener={this.props.materialDateOpener}
              housingInitial={true}
              menuOpener={this.props.menuOpener}
              createSliderOpen={this.props.createSliderOpen}
              //ref={this.CreateEventThePage}
              myVariable={this.props.myVariable}
              user={this.props.user}
              auth={this.props.auth}
              clearMaterialDate={this.props.clearMaterialDate}
            />
          )}
        />
        <PrivateRoute
          exact
          path="/newpage"
          render={(props) => (
            <Make
              {...props}
              hydrateUser={this.props.hydrateUser}
              city={this.props.city}
              community={this.props.community}
              communities={this.props.communities}
              materialDate={
                this.props.materialDate ? this.props.materialDate : new Date()
              }
              openplanner={this.props.openplanner}
              materialDateOpen={this.props.materialDateOpen}
              materialDateOpener={this.props.materialDateOpener}
              pageInitial={true}
              menuOpener={this.props.menuOpener}
              createSliderOpen={this.props.createSliderOpen}
              //ref={this.CreateEventThePage}
              myVariable={this.props.myVariable}
              user={this.props.user}
              auth={this.props.auth}
              clearMaterialDate={this.props.clearMaterialDate}
            />
          )}
        />
        <PrivateRoute
          exact
          path="/newvenue"
          render={(props) => (
            <Make
              {...props}
              hydrateUser={this.props.hydrateUser}
              city={this.props.city}
              community={this.props.community}
              communities={this.props.communities}
              materialDate={
                this.props.materialDate ? this.props.materialDate : new Date()
              }
              openplanner={this.props.openplanner}
              materialDateOpen={this.props.materialDateOpen}
              materialDateOpener={this.props.materialDateOpener}
              venueInitial={true}
              menuOpener={this.props.menuOpener}
              createSliderOpen={this.props.createSliderOpen}
              //ref={this.CreateEventThePage}
              myVariable={this.props.myVariable}
              user={this.props.user}
              auth={this.props.auth}
              clearMaterialDate={this.props.clearMaterialDate}
            />
          )}
        />
        <PrivateRoute
          exact
          path="/budget"
          render={(props) =>
            this.state.notesWithDates ? (
              <Calendar
                {...props}
                priorDates={this.state.priorDates}
                forwardDates={this.state.forwardDates}
                today={this.state.today}
                noteList={this.state.noteList}
                noteTitles={this.state.noteTitles}
                notes={this.state.notes}
                notesWithDates={this.state.notesWithDates}
                invites={this.props.invites}
                selfvites={this.props.selfvites}
                user={this.props.user}
                auth={this.props.auth}
                queriedDate={this.props.queriedDate}
                datecelestial={this.props.datecelestial}
                chosen={this.props.chosen}
                handleNextDay={this.props.handleNextDay}
                handlePreviousDay={this.props.handlePreviousDay}
                gotoDate={this.props.gotoDate}
                changedate={this.props.changedate}
                isSameDay={this.props.isSameDay}
                month={this.props.month}
                year={this.props.year}
                events={this.props.events}
                foundEntity={this.props.foundEntity}
                recipients={this.props.recipients}
                //calendarInitial={true}

                monthCalOpen={this.props.monthCalOpen}
                dayCalOpener={this.props.dayCalOpener}
                monthCalOpener={this.props.monthCalOpener}
                monthCalCloser={this.props.monthCalCloser}
                chats={this.props.chats}
                hiddenMsgs={this.props.hiddenMsgs}
                deletedMsgs={this.props.deletedMsgs}
                onDelete={this.props.onDelete}
                handleSave={this.props.handleSave}
                chooseInvite={this.props.chooseInvite}
                achatwasopen={this.props.achatwasopen}
                recentchatswasopen={this.props.recentchatswasopen}
                chatsopen={this.props.chatsopen}
                nochatopen={this.props.nochatopen}
              />
            ) : null
          }
        />
        <PrivateRoute
          exact
          path="/calendar"
          render={(props) =>
            this.state.notesWithDates ? (
              <Calendar
                {...props}
                priorDates={this.state.priorDates}
                forwardDates={this.state.forwardDates}
                today={this.state.today}
                noteList={this.state.noteList}
                noteTitles={this.state.noteTitles}
                notes={this.state.notes}
                notesWithDates={this.state.notesWithDates}
                invites={this.props.invites}
                selfvites={this.props.selfvites}
                user={this.props.user}
                auth={this.props.auth}
                queriedDate={this.props.queriedDate}
                datecelestial={this.props.datecelestial}
                chosen={this.props.chosen}
                handleNextDay={this.props.handleNextDay}
                handlePreviousDay={this.props.handlePreviousDay}
                gotoDate={this.props.gotoDate}
                changedate={this.props.changedate}
                isSameDay={this.props.isSameDay}
                month={this.props.month}
                year={this.props.year}
                recipients={this.props.recipients}
                entityId={this.props.entityId}
                entityType={this.props.entityType}
                events={this.props.events}
                foundEntity={this.props.foundEntity}
                calendarInitial={true}
                monthCalOpen={this.props.monthCalOpen}
                dayCalOpener={this.props.dayCalOpener}
                monthCalOpener={this.props.monthCalOpener}
                monthCalCloser={this.props.monthCalCloser}
                chats={this.props.chats}
                hiddenMsgs={this.props.hiddenMsgs}
                deletedMsgs={this.props.deletedMsgs}
                onDelete={this.props.onDelete}
                handleSave={this.props.handleSave}
                chooseInvite={this.props.chooseInvite}
                achatwasopen={this.props.achatwasopen}
                recentchatswasopen={this.props.recentchatswasopen}
                chatsopen={this.props.chatsopen}
                nochatopen={this.props.nochatopen}
              />
            ) : null
          }
        />
        <Route
          exact
          path="/plan"
          render={
            (props) =>
              this.state.notesWithDates ? (
                <Calendar
                  {...props}
                  priorDates={this.state.priorDates}
                  forwardDates={this.state.forwardDates}
                  today={this.state.today}
                  noteList={this.state.noteList}
                  noteTitles={this.state.noteTitles}
                  notes={this.state.notes}
                  notesWithDates={this.state.notesWithDates}
                  invites={this.props.invites}
                  selfvites={this.props.selfvites}
                  user={this.props.user}
                  auth={this.props.auth}
                  queriedDate={this.props.queriedDate}
                  datecelestial={this.props.datecelestial}
                  chosen={this.props.chosen}
                  handleNextDay={this.props.handleNextDay}
                  handlePreviousDay={this.props.handlePreviousDay}
                  gotoDate={this.props.gotoDate}
                  changedate={this.props.changedate}
                  isSameDay={this.props.isSameDay}
                  month={this.props.month}
                  year={this.props.year}
                  queryDate={this.props.queryDate}
                  chooseInvite={this.props.chooseInvite}
                  events={this.props.events}
                  foundEntity={this.props.foundEntity}
                  deletedMsgs={this.props.deletedMsgs}
                  hiddenMsgs={this.props.hiddenMsgs}
                  chats={this.props.chats}
                  recipients={this.props.recipients}
                  //inviteInitial={true}
                  // eventsInitial={true}
                  planInitial={true}
                  dayCalOpener={this.props.dayCalOpener}
                  monthCalOpener={this.props.monthCalOpener}
                  monthCalCloser={this.props.monthCalCloser}
                  handleSave={this.props.handleSave}
                  onDelete={this.props.onDelete}
                  recentchatswasopenit={this.props.recentchatswasopenit}
                  nochatopen={this.props.nochatopen}
                  Link={this.props.Link}
                  monthCalOpen={this.props.monthCalOpen}
                  dayCalCloseMonthCalOpener={
                    this.props.dayCalCloseMonthCalOpener
                  }
                  dayCalCloser={this.props.dayCalCloser}
                  //
                  etype={this.props.etype}
                  ctype={this.props.ctype}
                  jtype={this.props.jtype}
                  edmTrainevents={this.props.edmTrainevents}
                  clubs={this.props.clubs}
                  switchCommunitiesOpener={this.props.switchCommunitiesOpener}
                  menuOpener={this.props.menuOpener}
                  chooseEvent={this.props.chooseEvent}
                  chooseJob={this.props.chooseJob}
                  chooseEdmevent={this.props.choosetheedm}
                  community={this.props.community}
                  city={this.props.city}
                  eventOpener={this.props.eventOpener}
                  searchEvents={this.props.searchEvents}
                  openATC={this.props.openATC}
                  jobs={this.props.jobs}
                  tileChosen={this.props.tileChosen}
                  together={this.props.together}
                  achatwasopen={this.props.achatwasopen}
                  recentchatswasopen={this.props.recentchatswasopen}
                  chatsopen={this.props.chatsopen}
                />
              ) : null /*<Calendar
                            {...props}
                            planInitial={true}
                            queriedDate={this.props.queriedDate}
                            datecelestial={this.props.datecelestial}
                            chosen={this.props.chosen}
                            handleNextDay={this.props.handleNextDay}
                            handlePreviousDay={this.props.handlePreviousDay}
                            gotoDate={this.props.gotoDate}
                            changedate={this.props.changedate}
                            isSameDay={this.props.isSameDay}
                            month={this.props.month}
                            year={this.props.year}
                            events={this.props.events}
                            recipients={this.props.recipients}
                            
                            handleSave={this.props.handleSave}
                            monthCalOpen={this.props.monthCalOpen}
                            dayCalOpener={this.props.dayCalOpener}
                            dayCalCloseMonthCalOpener={this.props.dayCalCloseMonthCalOpener}
                            dayCalCloser={this.props.dayCalCloser}
                            monthCalOpener={this.props.monthCalOpener}
                            monthCalCloser={this.props.monthCalCloser}
                            onDelete={this.props.onDelete}
                            recentchatswasopenit={this.props.recentchatswasopenit}
                            nochatopen={this.props.nochatopen}
                            notes={this.props.notes}
                            Link={this.props.Link}
                            
                            
                            auth={this.props.auth}
                            user={this.props.user}
                          />*/
          }
        />
        <Route
          exact
          path="/events"
          render={(props) =>
            this.state.notesWithDates ? (
              <Calendar
                {...props}
                priorDates={this.state.priorDates}
                forwardDates={this.state.forwardDates}
                today={this.state.today}
                noteList={this.state.noteList}
                noteTitles={this.state.noteTitles}
                notes={this.state.notes}
                notesWithDates={this.state.notesWithDates}
                invites={this.props.invites}
                selfvites={this.props.selfvites}
                user={this.props.user}
                auth={this.props.auth}
                queriedDate={this.props.queriedDate}
                datecelestial={this.props.datecelestial}
                chosen={this.props.chosen}
                handleNextDay={this.props.handleNextDay}
                handlePreviousDay={this.props.handlePreviousDay}
                gotoDate={this.props.gotoDate}
                changedate={this.props.changedate}
                isSameDay={this.props.isSameDay}
                month={this.props.month}
                year={this.props.year}
                queryDate={this.props.queryDate}
                chooseInvite={this.props.chooseInvite}
                events={this.props.events}
                foundEntity={this.props.foundEntity}
                deletedMsgs={this.props.deletedMsgs}
                hiddenMsgs={this.props.hiddenMsgs}
                chats={this.props.chats}
                recipients={this.props.recipients}
                inviteInitial={true}
                eventsInitial={true}
                dayCalOpener={this.props.dayCalOpener}
                monthCalOpener={this.props.monthCalOpener}
                monthCalCloser={this.props.monthCalCloser}
                handleSave={this.props.handleSave}
                onDelete={this.props.onDelete}
                recentchatswasopenit={this.props.recentchatswasopenit}
                nochatopen={this.props.nochatopen}
                Link={this.props.Link}
                monthCalOpen={this.props.monthCalOpen}
                dayCalCloseMonthCalOpener={this.props.dayCalCloseMonthCalOpener}
                dayCalCloser={this.props.dayCalCloser}
                //
                etype={this.props.etype}
                ctype={this.props.ctype}
                jtype={this.props.jtype}
                edmTrainevents={this.props.edmTrainevents}
                clubs={this.props.clubs}
                switchCommunitiesOpener={this.props.switchCommunitiesOpener}
                menuOpener={this.props.menuOpener}
                chooseEvent={this.props.chooseEvent}
                chooseJob={this.props.chooseJob}
                chooseEdmevent={this.props.choosetheedm}
                community={this.props.community}
                city={this.props.city}
                eventOpener={this.props.eventOpener}
                searchEvents={this.props.searchEvents}
                openATC={this.props.openATC}
                jobs={this.props.jobs}
                tileChosen={this.props.tileChosen}
                together={this.props.together}
              />
            ) : null
          }
        />
        <Route
          exact
          path="/jobs"
          render={(props) =>
            this.state.notesWithDates ? (
              <Calendar
                {...props}
                priorDates={this.state.priorDates}
                forwardDates={this.state.forwardDates}
                today={this.state.today}
                noteList={this.state.noteList}
                noteTitles={this.state.noteTitles}
                notes={this.state.notes}
                notesWithDates={this.state.notesWithDates}
                invites={this.props.invites}
                selfvites={this.props.selfvites}
                user={this.props.user}
                auth={this.props.auth}
                queriedDate={this.props.queriedDate}
                datecelestial={this.props.datecelestial}
                chosen={this.props.chosen}
                handleNextDay={this.props.handleNextDay}
                handlePreviousDay={this.props.handlePreviousDay}
                gotoDate={this.props.gotoDate}
                changedate={this.props.changedate}
                isSameDay={this.props.isSameDay}
                month={this.props.month}
                year={this.props.year}
                events={this.props.events}
                foundEntity={this.props.foundEntity}
                deletedMsgs={this.props.deletedMsgs}
                hiddenMsgs={this.props.hiddenMsgs}
                chats={this.props.chats}
                recipients={this.props.recipients}
                inviteInitial={true}
                jobsInitial={true}
                dayCalOpener={this.props.dayCalOpener}
                monthCalOpener={this.props.monthCalOpener}
                monthCalCloser={this.props.monthCalCloser}
                handleSave={this.props.handleSave}
                onDelete={this.props.onDelete}
                recentchatswasopenit={this.props.recentchatswasopenit}
                nochatopen={this.props.nochatopen}
                Link={this.props.Link}
                monthCalOpen={this.props.monthCalOpen}
                dayCalCloseMonthCalOpener={this.props.dayCalCloseMonthCalOpener}
                dayCalCloser={this.props.dayCalCloser}
                //

                etype={this.props.etype}
                ctype={this.props.ctype}
                jtype={this.props.jtype}
                edmTrainevents={this.props.edmTrainevents}
                clubs={this.props.clubs}
                switchCommunitiesOpener={this.props.switchCommunitiesOpener}
                menuOpener={this.props.menuOpener}
                chooseEvent={this.props.chooseEvent}
                chooseJob={this.props.chooseJob}
                chooseEdmevent={this.props.choosetheedm}
                city={this.props.city}
                eventOpener={this.props.eventOpener}
                searchEvents={this.props.searchEvents}
                openATC={this.props.openATC}
                jobs={this.props.jobs}
                tileChosen={this.props.tileChosen}
                together={this.props.together}
              />
            ) : null
          }
        />
        <Route
          exact
          path="/sd/:id/:id1"
          render={(props) =>
            this.state.notesWithDates ? (
              <Calendar
                {...props}
                priorDates={this.state.priorDates}
                forwardDates={this.state.forwardDates}
                today={this.state.today}
                noteList={this.state.noteList}
                noteTitles={this.state.noteTitles}
                notes={this.state.notes}
                notesWithDates={this.state.notesWithDates}
                invites={this.props.invites}
                selfvites={this.props.selfvites}
                queriedDate={this.props.queriedDate}
                user={this.props.user}
                auth={this.props.auth}
                datecelestial={this.props.datecelestial}
                chosen={this.props.chosen}
                handleNextDay={this.props.handleNextDay}
                handlePreviousDay={this.props.handlePreviousDay}
                gotoDate={this.props.gotoDate}
                changedate={this.props.changedate}
                isSameDay={this.props.isSameDay}
                month={this.props.month}
                year={this.props.year}
                queryDate={this.props.queryDate}
                chooseInvite={this.props.chooseInvite}
                events={this.props.events}
                foundEntity={this.props.foundEntity}
                deletedMsgs={this.props.deletedMsgs}
                hiddenMsgs={this.props.hiddenMsgs}
                chats={this.props.chats}
                recipients={this.props.recipients}
                inviteInitial={true}
                eventsInitial={true}
                dayCalOpener={this.props.dayCalOpener}
                monthCalOpener={this.props.monthCalOpener}
                monthCalCloser={this.props.monthCalCloser}
                handleSave={this.props.handleSave}
                onDelete={this.props.onDelete}
                recentchatswasopenit={this.props.recentchatswasopenit}
                nochatopen={this.props.nochatopen}
                Link={this.props.Link}
                monthCalOpen={this.props.monthCalOpen}
                dayCalCloseMonthCalOpener={this.props.dayCalCloseMonthCalOpener}
                dayCalCloser={this.props.dayCalCloser}
                //
                etype={this.props.etype}
                ctype={this.props.ctype}
                jtype={this.props.jtype}
                edmTrainevents={this.props.edmTrainevents}
                clubs={this.props.clubs}
                switchCommunitiesOpener={this.props.switchCommunitiesOpener}
                menuOpener={this.props.menuOpener}
                chooseEvent={this.props.chooseEvent}
                chooseJob={this.props.chooseJob}
                chooseEdmevent={this.props.choosetheedm}
                community={this.props.community}
                city={this.props.city}
                eventOpener={this.props.eventOpener}
                searchEvents={this.props.searchEvents}
                openATC={this.props.openATC}
                jobs={this.props.jobs}
                tileChosen={this.props.tileChosen}
                together={this.props.together}
                entityId={this.props.entityId}
                entityType={this.props.entityType}
                //schedule
                achatwasopen={this.props.achatwasopen}
                recentchatswasopen={this.props.recentchatswasopen}
                chatsopen={this.props.chatsopen}
              />
            ) : null
          }
        />
        <Route
          exact
          path="/bk/:id"
          render={(props) =>
            this.state.notesWithDates ? (
              <Calendar
                {...props}
                priorDates={this.state.priorDates}
                forwardDates={this.state.forwardDates}
                today={this.state.today}
                noteList={this.state.noteList}
                noteTitles={this.state.noteTitles}
                notes={this.state.notes}
                notesWithDates={this.state.notesWithDates}
                invites={this.props.invites}
                selfvites={this.props.selfvites}
                hydrateUser={this.props.hydrateUser}
                user={this.props.user}
                auth={this.props.auth}
                queriedDate={this.props.queriedDate}
                datecelestial={this.props.datecelestial}
                chosen={this.props.chosen}
                handleNextDay={this.props.handleNextDay}
                handlePreviousDay={this.props.handlePreviousDay}
                gotoDate={this.props.gotoDate}
                changedate={this.props.changedate}
                isSameDay={this.props.isSameDay}
                month={this.props.month}
                year={this.props.year}
                recipients={this.props.recipients}
                entityId={this.props.entityId}
                entityType={this.props.entityType}
                events={this.props.events}
                foundEntity={this.props.foundEntity}
                //calendarInitial={true}
                //bookInitial={true}

                monthCalOpen={this.props.monthCalOpen}
                dayCalOpener={this.props.dayCalOpener}
                monthCalOpener={this.props.monthCalOpener}
                monthCalCloser={this.props.monthCalCloser}
                chats={this.props.chats}
                hiddenMsgs={this.props.hiddenMsgs}
                deletedMsgs={this.props.deletedMsgs}
                onDelete={this.props.onDelete}
                handleSave={this.props.handleSave}
                chooseInvite={this.props.chooseInvite}
                achatwasopen={this.props.achatwasopen}
                recentchatswasopen={this.props.recentchatswasopen}
                chatsopen={this.props.chatsopen}
                nochatopen={this.props.nochatopen}
              />
            ) : null
          }
        />
        <Route
          exact
          path="/plans/:id"
          render={(props) => (
            <PlansByName {...props} notes={this.props.notes} />
          )}
        />
        <Route
          exact
          path="/plan/:id"
          render={(props) => (
            <PlanOpen
              {...props}
              noteList={noteList}
              onDelete={this.props.onDelete}
              handleSave={this.props.handleSave2}
              inviteChosen={this.props.inviteChosen}
              notes={this.props.notes}
              auth={this.props.auth}
            />
          )}
        />
        <Route
          exact
          path="/plan/:id/edit"
          render={(props) => (
            <PlanEdit
              {...props}
              following={this.props.following}
              getUserInfo={this.props.getUserInfo}
              rangeChosen={this.props.rangeChosen}
              auth={this.props.auth}
              user={this.props.user}
              chats={this.props.chats}
              choosePlan={this.props.choosePlan}
              materialDateOpen={this.props.materialDateOpen}
              materialDate={this.props.materialDate}
              materialDateOpener={this.props.materialDateOpener}
              notes={this.props.notes}
              onSave={this.props.onSave}
              onDelete={this.props.onDelete}
              clearMaterialDate={this.props.clearMaterialDate}
            />
          )}
        />
        {/*<Route
          exact
          path="/event/:id"
          render={(props) => (
            <Made
              {...props}
              postHeight={this.props.postHeight}
              groupLast={this.state.groupLast}
              groupUndo={this.state.groupUndo}
              helper={this.props.helper}
              hydrateEntityFromName={this.props.hydrateEntityFromName}
              findPost={this.props.findPost}
              getCommunity={this.props.getCommunity}
              hydrateUser={this.props.hydrateUser}
              chosenEntity={this.props.chosenEntity}
              forumPosts={this.props.forumPosts}
              pathname={this.props.pathname}
              parent={this.props.parent}
              droppedPost={this.props.droppedPost}
              linkDrop={this.props.linkDrop}
              dropId={this.props.dropId}
              getUserInfo={this.props.getUserInfo}
              noteList={noteList}
              onDelete={this.props.onDelete}
              handleSave={this.props.handleSave2}
              communities={this.props.communities}
              community={this.props.community}
              url={window.location.path}
              tickets={this.props.tickets}
              eventsInitial={true}
              eventOpener={this.props.eventOpener}
              event={this.props.eventChosen}
              auth={this.props.auth}
              resetEvent={this.props.resetEvent}
              user={this.props.user}
              admin={this.state.admin}
              myEvents={this.props.myEvents}
              listDeletedEvts={this.props.listDeletedEvts}
              handleChangeDate={this.props.handleChangeDate}
              materialDate={this.props.materialDate}
            />
          )}
          />*/}
        <Route
          exact
          path="/events/edmtrain/:id"
          children={(props) => (
            <Eventedmopen
              {...props}
              noteList={noteList}
              noteTitles={noteTitles}
              handleSave={this.props.handleSave}
              onDelete={this.props.onDelete}
              notes={this.props.notes}
              event={this.props.chosenEdmevent}
              auth={this.props.auth}
              events={this.props.events}
            />
          )}
        />
        {/*<Route
          exact
          path="/clubs/:id/:id1"
          render={(props) => (
            <Made
              {...props}
              hydrateUserFromUserName={this.props.hydrateUserFromUserName}
              postHeight={this.props.postHeight}
              groupLast={this.state.groupLast}
              groupUndo={this.state.groupUndo}
              helper={this.props.helper}
              hydrateEntityFromName={this.props.hydrateEntityFromName}
              findPost={this.props.findPost}
              getCommunity={this.props.getCommunity}
              hydrateUser={this.props.hydrateUser}
              chosenEntity={this.props.chosenEntity}
              forumPosts={this.props.forumPosts}
              pathname={this.props.pathname}
              getUserInfo={this.props.getUserInfo}
              openChatWithGroup={this.props.openChatWithGroup}
              communities={this.props.communities}
              community={this.props.community}
              clubInitial={true}
              clubOpener={this.props.clubOpener}
              event={this.props.clubChosen}
              auth={this.props.auth}
              resetEvent={this.props.resetEvent}
              user={this.props.user}
              listDeletedClbs={this.props.listDeletedClbs}
            />
          )}
        />
        <Route
          exact
          path="/shops/:id/:id1"
          render={(props) => (
            <Made
              {...props}
              hydrateUserFromUserName={this.props.hydrateUserFromUserName}
              postHeight={this.props.postHeight}
              groupLast={this.state.groupLast}
              groupUndo={this.state.groupUndo}
              helper={this.props.helper}
              hydrateEntityFromName={this.props.hydrateEntityFromName}
              findPost={this.props.findPost}
              getCommunity={this.props.getCommunity}
              hydrateUser={this.props.hydrateUser}
              chosenEntity={this.props.chosenEntity}
              forumPosts={this.props.forumPosts}
              pathname={this.props.pathname}
              getUserInfo={this.props.getUserInfo}
              openChatWithGroup={this.props.openChatWithGroup}
              communities={this.props.communities}
              community={this.props.community}
              shopInitial={true}
              clubOpener={this.props.clubOpener}
              event={this.props.clubChosen}
              auth={this.props.auth}
              resetEvent={this.props.resetEvent}
              user={this.props.user}
              listDeletedClbs={this.props.listDeletedClbs}
            />
          )}
        />
        <Route
          exact
          path="/restaurants/:id/:id1"
          render={(props) => (
            <Made
              {...props}
              hydrateUserFromUserName={this.props.hydrateUserFromUserName}
              postHeight={this.props.postHeight}
              groupLast={this.state.groupLast}
              groupUndo={this.state.groupUndo}
              helper={this.props.helper}
              hydrateEntityFromName={this.props.hydrateEntityFromName}
              findPost={this.props.findPost}
              getCommunity={this.props.getCommunity}
              hydrateUser={this.props.hydrateUser}
              chosenEntity={this.props.chosenEntity}
              forumPosts={this.props.forumPosts}
              pathname={this.props.pathname}
              getUserInfo={this.props.getUserInfo}
              openChatWithGroup={this.props.openChatWithGroup}
              communities={this.props.communities}
              community={this.props.community}
              restaurantInitial={true}
              clubOpener={this.props.clubOpener}
              event={this.props.clubChosen}
              auth={this.props.auth}
              resetEvent={this.props.resetEvent}
              user={this.props.user}
              listDeletedClbs={this.props.listDeletedClbs}
            />
          )}
        />
        <Route
          exact
          path="/services/:id/:id1"
          render={(props) => (
            <Made
              {...props}
              hydrateUserFromUserName={this.props.hydrateUserFromUserName}
              postHeight={this.props.postHeight}
              groupLast={this.state.groupLast}
              groupUndo={this.state.groupUndo}
              helper={this.props.helper}
              hydrateEntityFromName={this.props.hydrateEntityFromName}
              findPost={this.props.findPost}
              getCommunity={this.props.getCommunity}
              hydrateUser={this.props.hydrateUser}
              chosenEntity={this.props.chosenEntity}
              forumPosts={this.props.forumPosts}
              pathname={this.props.pathname}
              getUserInfo={this.props.getUserInfo}
              openChatWithGroup={this.props.openChatWithGroup}
              communities={this.props.communities}
              community={this.props.community}
              serviceInitial={true}
              clubOpener={this.props.clubOpener}
              event={this.props.clubChosen}
              auth={this.props.auth}
              resetEvent={this.props.resetEvent}
              user={this.props.user}
              listDeletedClbs={this.props.listDeletedClbs}
            />
          )}
        />
        <Route
          exact
          path="/departments/:id/:id1"
          render={(props) => (
            <Made
              {...props}
              postHeight={this.props.postHeight}
              groupLast={this.state.groupLast}
              groupUndo={this.state.groupUndo}
              helper={this.props.helper}
              hydrateEntityFromName={this.props.hydrateEntityFromName}
              findPost={this.props.findPost}
              getCommunity={this.props.getCommunity}
              hydrateUser={this.props.hydrateUser}
              chosenEntity={this.props.chosenEntity}
              forumPosts={this.props.forumPosts}
              pathname={this.props.pathname}
              getUserInfo={this.props.getUserInfo}
              openChatWithGroup={this.props.openChatWithGroup}
              communities={this.props.communities}
              community={this.props.community}
              departmentInitial={true}
              clubOpener={this.props.clubOpener}
              event={this.props.clubChosen}
              auth={this.props.auth}
              resetEvent={this.props.resetEvent}
              user={this.props.user}
              listDeletedClbs={this.props.listDeletedClbs}
            />
          )}
        />
        {/*<Route
                      exact
                      path="/classes/:id/:id1/:id2"
                      render={(props) => (
                        <Made
                          {...props}
                          hydrateEntityFromName={
                            this.props.hydrateEntityFromName
                          }
                          findPost={this.props.findPost}
                          getCommunity={this.props.getCommunity}
                          hydrateUser={this.props.hydrateUser}
                          chosenEntity={this.props.chosenEntity}
                          
                          forumPosts={this.props.forumPosts}
                          pathname={this.props.pathname}
                          
                          getUserInfo={this.props.getUserInfo}
                          openChatWithGroup={this.props.openChatWithGroup}
                          openachat={this.props.openachat}
                          communities={this.props.communities}
                          community={this.props.community}
                          classInitial={true}
                          //classOpener={this.props.classOpener}
                          //event={this.props.classChosen}
                          auth={this.props.auth}
                          resetEvent={this.props.resetEvent}
                          user={this.props.user}

                          //listDeletedClss={this.props.listDeletedClss}
                        />
                      )}
                        />*/}
        <Route
          exact
          path="/oldClasses/:id"
          render={(props) => (
            <Made
              {...props}
              postHeight={this.props.postHeight}
              groupLast={this.state.groupLast}
              groupUndo={this.state.groupUndo}
              helper={this.props.helper}
              hydrateEntity={this.props.hydrateEntity}
              findPost={this.props.findPost}
              getCommunity={this.props.getCommunity}
              hydrateUser={this.props.hydrateUser}
              chosenEntity={this.props.chosenEntity}
              forumPosts={this.props.forumPosts}
              pathname={this.props.pathname}
              getUserInfo={this.props.getUserInfo}
              openChatWithGroup={this.props.openChatWithGroup}
              openachat={this.props.openachat}
              communities={this.props.communities}
              community={this.props.community}
              classInitial={true}
              //classOpener={this.props.classOpener}
              //event={this.props.classChosen}
              auth={this.props.auth}
              resetEvent={this.props.resetEvent}
              user={this.props.user}

              //listDeletedClss={this.props.listDeletedClss}
            />
          )}
        />
        <Route
          exact
          path="/classes/:id/:id1"
          render={(props) => (
            <Made
              {...props}
              postHeight={this.props.postHeight}
              groupLast={this.state.groupLast}
              groupUndo={this.state.groupUndo}
              helper={this.props.helper}
              hydrateEntityFromName={this.props.hydrateEntityFromName}
              findPost={this.props.findPost}
              getCommunity={this.props.getCommunity}
              hydrateUser={this.props.hydrateUser}
              chosenEntity={this.props.chosenEntity}
              forumPosts={this.props.forumPosts}
              pathname={this.props.pathname}
              getUserInfo={this.props.getUserInfo}
              openChatWithGroup={this.props.openChatWithGroup}
              openachat={this.props.openachat}
              communities={this.props.communities}
              community={this.props.community}
              classInitial={true}
              //classOpener={this.props.classOpener}
              //event={this.props.classChosen}
              auth={this.props.auth}
              resetEvent={this.props.resetEvent}
              user={this.props.user}

              //listDeletedClss={this.props.listDeletedClss}
            />
          )}
        />
        <Route
          exact
          path="/job/:id"
          render={(props) => (
            <Made
              {...props}
              postHeight={this.props.postHeight}
              groupLast={this.state.groupLast}
              groupUndo={this.state.groupUndo}
              helper={this.props.helper}
              hydrateEntity={this.props.hydrateEntity}
              findPost={this.props.findPost}
              getCommunity={this.props.getCommunity}
              hydrateUser={this.props.hydrateUser}
              chosenEntity={this.props.chosenEntity}
              forumPosts={this.props.forumPosts}
              pathname={this.props.pathname}
              getUserInfo={this.props.getUserInfo}
              openChatWithGroup={this.props.openChatWithGroup}
              communities={this.props.communities}
              community={this.props.community}
              jobInitial={true}
              jobOpener={this.props.jobOpener}
              event={this.props.jobChosen}
              auth={this.props.auth}
              resetEvent={this.props.resetEvent}
              user={this.props.user}
              listDeletedJobs={this.props.listDeletedJobs}
            />
          )}
        />
        <Route
          exact
          path="/housing/:id"
          render={(props) => (
            <Made
              {...props}
              postHeight={this.props.postHeight}
              groupLast={this.state.groupLast}
              groupUndo={this.state.groupUndo}
              helper={this.props.helper}
              hydrateEntity={this.props.hydrateEntity}
              findPost={this.props.findPost}
              getCommunity={this.props.getCommunity}
              hydrateUser={this.props.hydrateUser}
              chosenEntity={this.props.chosenEntity}
              forumPosts={this.props.forumPosts}
              pathname={this.props.pathname}
              getUserInfo={this.props.getUserInfo}
              openChatWithGroup={this.props.openChatWithGroup}
              community={this.props.community}
              url={window.location.path}
              tickets={this.props.tickets}
              housingInitial={true}
              eventOpener={this.props.eventOpener}
              event={this.props.eventChosen}
              auth={this.props.auth}
              resetEvent={this.props.resetEvent}
              user={this.props.user}
              myEvents={this.props.myEvents}
              listDeletedEvts={this.props.listDeletedEvts}
            />
          )}
        />
        <Route
          exact
          path="/pages/:id/:id1"
          render={(props) => (
            <Made
              {...props}
              postHeight={this.props.postHeight}
              groupLast={this.state.groupLast}
              groupUndo={this.state.groupUndo}
              helper={this.props.helper}
              hydrateEntityFromName={this.props.hydrateEntityFromName}
              findPost={this.props.findPost}
              getCommunity={this.props.getCommunity}
              hydrateUser={this.props.hydrateUser}
              chosenEntity={this.props.chosenEntity}
              forumPosts={this.props.forumPosts}
              pathname={this.props.pathname}
              getUserInfo={this.props.getUserInfo}
              openChatWithGroup={this.props.openChatWithGroup}
              communities={this.props.communities}
              community={this.props.community}
              pageInitial={true}
              //classOpener={this.props.classOpener}
              //event={this.props.classChosen}
              auth={this.props.auth}
              resetEvent={this.props.resetEvent}
              user={this.props.user}

              //listDeletedClss={this.props.listDeletedClss}
            />
          )}
        />
        <Route
          exact
          path="/venues/:id/:id1"
          render={(props) => (
            <Made
              {...props}
              postHeight={this.props.postHeight}
              groupLast={this.state.groupLast}
              groupUndo={this.state.groupUndo}
              helper={this.props.helper}
              hydrateEntityFromName={this.props.hydrateEntityFromName}
              findPost={this.props.findPost}
              getCommunity={this.props.getCommunity}
              hydrateUser={this.props.hydrateUser}
              chosenEntity={this.props.chosenEntity}
              forumPosts={this.props.forumPosts}
              pathname={this.props.pathname}
              getUserInfo={this.props.getUserInfo}
              openChatWithGroup={this.props.openChatWithGroup}
              communities={this.props.communities}
              community={this.props.community}
              venueInitial={true}
              //classOpener={this.props.classOpener}
              //event={this.props.classChosen}
              auth={this.props.auth}
              resetEvent={this.props.resetEvent}
              user={this.props.user}

              //listDeletedClss={this.props.listDeletedClss}
            />
          )}
        />
        */}
        <Route
          exact
          path="/newplan"
          render={(props) => (
            <Make
              {...props}
              postHeight={this.props.postHeight}
              hydrateUser={this.props.hydrateUser}
              recipients={this.props.recipients}
              rangeChosen={this.props.rangeChosen}
              openplanner={this.props.openplanner}
              materialDateOpen={this.props.materialDateOpen}
              materialDate={
                this.props.materialDate ? this.props.materialDate : new Date()
              }
              materialDateOpener={this.props.materialDateOpener}
              chats={this.props.chats}
              handleSave={this.props.handleSave}
              planInitial={true}
              menuOpener={this.props.menuOpener}
              createSliderOpen={this.props.createSliderOpen}
              //ref={this.CreateEventThePage}
              myVariable={this.props.myVariable}
              user={this.props.user}
              auth={this.props.auth}
              clearMaterialDate={this.props.clearMaterialDate}
            />
          )}
        />
        <Route
          exact
          path="/newplan/:id"
          render={(props) => (
            <Make
              {...props}
              hydrateUser={this.props.hydrateUser}
              recipients={this.props.recipients}
              rangeChosen={this.props.rangeChosen}
              openplanner={this.props.openplanner}
              materialDateOpen={this.props.materialDateOpen}
              materialDate={
                this.props.materialDate ? this.props.materialDate : new Date()
              }
              materialDateOpener={this.props.materialDateOpener}
              chats={this.props.chats}
              handleSave={this.props.handleSave}
              planInitial={true}
              menuOpener={this.props.menuOpener}
              createSliderOpen={this.props.createSliderOpen}
              myVariable={this.props.myVariable}
              user={this.props.user}
              auth={this.props.auth}
              clearMaterialDate={this.props.clearMaterialDate}
            />
          )}
        />
        <Route
          exact
          path="/newplan/:id/:id1"
          render={(props) => (
            <Make
              {...props}
              hydrateUser={this.props.hydrateUser}
              recipients={this.props.recipients}
              rangeChosen={this.props.rangeChosen}
              openplanner={this.props.openplanner}
              materialDateOpen={this.props.materialDateOpen}
              materialDate={
                this.props.materialDate ? this.props.materialDate : new Date()
              }
              materialDateOpener={this.props.materialDateOpener}
              chats={this.props.chats}
              handleSave={this.props.handleSave}
              planInitial={true}
              menuOpener={this.props.menuOpener}
              createSliderOpen={this.props.createSliderOpen}
              myVariable={this.props.myVariable}
              user={this.props.user}
              auth={this.props.auth}
              clearMaterialDate={this.props.clearMaterialDate}
            />
          )}
        />
        <Route
          //BumpRoute
          exact
          path="/login"
          render={(props) => (
            <Login
              {...props}
              saveAuth={this.props.saveAuth}
              hydrateUserFromUserName={this.props.hydrateUserFromUserName}
              unloadGreenBlue={this.props.unloadGreenBlue}
              loadGreenBlue={this.props.loadGreenBlue}
              saveAuth={this.props.saveAuth}
              stopAnon={this.props.stopAnon}
              auth={this.props.auth}
              user={this.props.user}
              loginOpenstate={this.props.loginOpenstate}
              loginOpen={this.props.loginOpen}
              menuOpener={this.props.menuOpener}
              eventOpener={this.props.eventOpener}
              redirectToReferrer={this.props.redirectToReferrer}
              goSignupConfirmed={this.props.goSignupConfirmed}
              watchingSignupVideo={this.props.watchingSignupVideo}
              chatcloser={this.props.chatcloser}
              chatopener={this.props.chatopener}
              userLoaded={this.props.userLoaded}
              anonymous={this.props.anonymous}
            />
          )}
        />
        <PrivateRoute
          exact
          path="/files"
          render={(props) => (
            <FileManager
              {...props}
              getUserInfo={this.props.getUserInfo}
              user={this.props.user}
              unloadGreenBlue={this.props.unloadGreenBlue}
              loadGreenBlue={this.props.loadGreenBlue}
              inCloud={this.props.inCloud}
              auth={this.props.auth}
              videos={this.props.videos}
              folders={this.props.folders}
              getVideos={this.props.getVideos}
              getFolders={this.props.getFolders}
            />
          )}
        />
        <Route exact path="/doc" render={(props) => <Document {...props} />} />
        <Route
          exact
          path="/"
          render={(props) => <Nothing {...props} openit={this.props.openit} />}
        />
      </Switch>
    );
  }
}
export default Routes;
